// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// room visibility
enum RoomVisibility {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum UserStatus {
  ONLINE
  OFFLINE
  INGAME
}

model User {
  // initial user data
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // personal user data
  email String @unique
  firstname String
  lastname String
  username String @unique
  image String

  // verification user authentification
  isVerified Boolean @default(false)

  // user status online , offline ,in game
  status UserStatus @default(OFFLINE)
  // user 2fa
  twoFactorSecret String
  twoFactorEnabled Boolean @default(false)

  // Game user data
  gameWins Int @default(0)
  gameMatches Int @default(0)
  gameLoses Int @default(0)
  gameElo Int @default(800)
  
  uGames Game[] @relation(name: "userGame")
  oGames Game[] @relation(name: "oppGame")

  // Chat user data
  chatRooms ChatRoomMember[]
  sentMessages Message[] @relation(name: "SentMessages")
  sentFriendRequests Friendship[] @relation("Sender")
  receivedFriendRequests Friendship[] @relation("Receiver")
  receivedNotification Notification[] @relation("Receiver")
  sendNotification Notification[] @relation("Sender")
}

model Game {
  gameId Int @id @default(autoincrement())
  userPlayerId Int
  userOpponnentId Int
  useScore Int
  oppScore Int
  user User @relation(name:"userGame", fields: [userPlayerId], references: [id])
  oppennent User @relation(name: "oppGame", fields: [userOpponnentId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}
enum Blocker {
  SENDER
  RECEIVER
}
model Friendship {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  status FriendshipStatus

  sender User @relation("Sender", fields: [senderId], references: [id])
  senderId Int
  receiver User @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int

  block Boolean @default(false)
  blockBy Blocker?
}

enum RequestType {
  FRIENDSHIP
  GAME
}
model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  type String
  content String
  RequestId Int
  RequestType RequestType
  vue Boolean @default(false)
  userId Int
  senderId Int
  senderName String
  senderImage String
  Receiver User @relation( "Receiver",fields: [userId], references: [id])
  sender User @relation( "Sender",fields: [senderId], references: [id])
}

// begin chat models
model ChatRoom {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String? @unique
  passwordHash String?
  owner Int?
  visibility RoomVisibility? @default(PUBLIC)
  users ChatRoomMember[]
  messages Message[]
}

model ChatRoomMember {
  // Foreign keys
  userId Int
  chatRoomId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())
  is_admin Boolean @default(false)
  leftAt DateTime?
  @@id([userId, chatRoomId])
}

model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  senderId Int
  chatRoomId Int 
  sender User @relation(name: "SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  text String
}

// model userMessage {
//   id Int @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   senderId Int
//   receiverId Int
//   sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
//   receiver User @relation(fields: [receiverId], references: [id], onDelete: Cascade)
//   text String
// }
